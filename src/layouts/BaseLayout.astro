---
import Footer from "@/components/footer/Footer.astro";
import BaseHead from "@/components/head/BaseHead.astro";
import NavBar from "@/components/nav/NavBar.astro";

import 'vanilla-cookieconsent/dist/cookieconsent.css';


interface Props {
  title: string;
  description: string;
  type?: string;
  footer?: boolean;
}

const {
  title,
  description,
  type = "website",
} = Astro.props;
---

<html lang="en" class="cc--elegant-black h-full">
  <BaseHead title={title} description={description} type={type} />
  <body
    class="w-screen overflow-x-hidden p-0 h-full"
  >
    <NavBar />
    <main 
    id="page" class=w-full">
      <slot />
    </main>
   <Footer />

  <script>
    // Initialization for ES Users
import {
  Collapse,
  initTWE,
} from "tw-elements";

initTWE({ Collapse });
    </script>
  <script>
    import { run } from 'vanilla-cookieconsent';
    import { config } from '../scripts/CookieConsentConfig';
  
    run(config);
  </script>
  <script >
    // Log all consent-related dataLayer events on load
    window.addEventListener('load', function () {
      const consentEvents = window.dataLayer.filter(item => item['event'] === 'update_consent');
      console.log('Consent Events:', consentEvents);

      console.log(window.dataLayer)
  
      // Optionally log current consent state
      const currentConsent = {};
      for (const item of consentEvents) {
        if (item['event'] && item['consent']) {
          Object.assign(currentConsent, item['consent']);
        }
      }
      console.log('Current Consent State:', currentConsent);
    });
  </script>

  <script type="module">
    function setVh() {
      const vh = (
        window.visualViewport?.height || window.innerHeight
      ) * 0.01;
  
      document.documentElement.style.setProperty('--vh', `${vh}px`);
    }
  
    // Run on key lifecycle events
    setVh();
    window.addEventListener('DOMContentLoaded', setVh);
    window.addEventListener('load', setVh);
    window.addEventListener('resize', setVh);
  
    // Mobile-specific: track visual viewport changes
    if (window.visualViewport) {
      window.visualViewport.addEventListener('resize', setVh);
      window.visualViewport.addEventListener('scroll', setVh);
    }
  
    // Fallback re-run for late URL bar animations
    setTimeout(setVh, 500);
  </script>
  </body>
</html>
