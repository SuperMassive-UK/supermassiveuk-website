---
//@ts-nocheck

import Dropdown from "./Dropdown.astro";
import { Astronav, MenuItems, MenuIcon } from "astro-navbar";
import { Image } from "astro:assets";
import Logo from "../../assets/images/logo-transparent.png";
import { getEntry } from "astro:content";

const navData = await getEntry("data", "nav");
---

<header
  class="nav-container absolute w-full flex flex-col md:flex-row justify-between
  items-bottom bg-background py-6 px-6 md:px-10 z-50 max-w-[1600px] left-0 right-0 m-auto"
  data-scroll-section
>
  <div
    class="flex w-full md:w-auto items-center justify-between"
    data-scroll
    data-scroll-speed="4"
    data-scroll-position="top"
  >
    <a href="/" class="text-lg"
      ><Image src={Logo} alt="SUPERMASSIVE logo" width={150} height={150} /></a
    >
    <div class="block md:hidden">
      <button id="astronav-menu" aria-label="Toggle Menu">
        <svg
          fill="currentColor"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
        >
          <title>Toggle Menu</title>
          <path
            class="astronav-close-icon astronav-toggle hidden"
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M18.278 16.864a1 1 0 01-1.414 1.414l-4.829-4.828-4.828 4.828a1 1 0 01-1.414-1.414l4.828-4.829-4.828-4.828a1 1 0 011.414-1.414l4.829 4.828 4.828-4.828a1 1 0 111.414 1.414l-4.828 4.829 4.828 4.828z"
          ></path>
          <path
            class="astronav-open-icon astronav-toggle"
            fill-rule="evenodd"
            d="M4 5h16a1 1 0 010 2H4a1 1 0 110-2zm0 6h16a1 1 0 010 2H4a1 1 0 010-2zm0 6h16a1 1 0 010 2H4a1 1 0 010-2z"
          ></path>
        </svg>
      </button>
    </div>
  </div>
  <MenuItems class="hidden w-full md:w-auto mt-2 md:flex font-medium">
    <ul
      class="flex flex-col items-center text-md text-white uppercase font-heading"
      data-scroll
      data-scroll-speed="4"
      data-scroll-position="top"
    >
      {
        navData.data.map((item: any, index: number) => (
          <>
            {item.children && (
              <Dropdown
                title={item.label}
                children={item.children}
                lastItem={index === item.children.length - 1}
              />
            )}

            {!item.children && (
              <div class="relative">
                <div
                  class="hover:scale-125 transition"
                  class:list={[
                    {
                      "nav-active": item.url === Astro.url.pathname,
                    },
                  ]}
                >
                  <a
                    href={item.url}
                    class="flex py-2 text-inherit no-underline"
                  >
                    {item.label}
                  </a>
                </div>
              </div>
            )}
          </>
        ))
      }
    </ul>
  </MenuItems>
</header>

<script>
  ["DOMContentLoaded", "astro:after-swap"].forEach((event) => {
    document.addEventListener(event, addListeners);
  });

  // Function to clone and replace elements
  function cloneAndReplace(element: any) {
    const clone = element.cloneNode(true);
    element.parentNode.replaceChild(clone, element);
  }

  function addListeners() {
    // Clean up existing listeners
    const oldMenuButton = document.getElementById("astronav-menu");
    if (oldMenuButton) {
      cloneAndReplace(oldMenuButton);
    }

    const oldDropdownMenus = document.querySelectorAll(".astronav-dropdown");
    oldDropdownMenus.forEach((menu) => {
      cloneAndReplace(menu);
    });

    // Mobile nav toggle
    const menuButton = document.getElementById("astronav-menu");
    menuButton && menuButton.addEventListener("click", toggleMobileNav);

    // Dropdown menus
    const dropdownMenus = document.querySelectorAll(".astronav-dropdown");
    dropdownMenus.forEach((menu) => {
      const button = menu.querySelector("button");
      button &&
        button.addEventListener("click", (event) =>
          toggleDropdownMenu(event, menu, dropdownMenus)
        );

      // Handle Submenu Dropdowns
      const dropDownSubmenus = menu.querySelectorAll(
        ".astronav-dropdown-submenu"
      );

      dropDownSubmenus.forEach((submenu) => {
        const submenuButton = submenu.querySelector("button");
        submenuButton &&
          submenuButton.addEventListener("click", (event) => {
            event.stopImmediatePropagation();
            toggleSubmenuDropdown(event, submenu);
          });
      });
    });

    // Clicking away from dropdown will remove the dropdown class
    document.addEventListener("click", closeAllDropdowns);
  }

  function toggleMobileNav() {
    [...document.querySelectorAll(".astronav-toggle")].forEach((el) => {
      el.classList.toggle("hidden");
    });
    const container = document.querySelector(".nav-container");

    container?.classList.toggle("bg-black");
  }

  function toggleDropdownMenu(event: any, menu: any, dropdownMenus: any) {
    toggleMenu(menu);

    // Close one dropdown when selecting another
    Array.from(dropdownMenus)
      .filter((el) => el !== menu && !menu.contains(el))
      .forEach(closeMenu);

    event.stopPropagation();
  }

  function toggleSubmenuDropdown(event: any, submenu: any) {
    event.stopPropagation();
    toggleMenu(submenu);

    // Close sibling submenus at the same nesting level
    const siblingSubmenus = submenu
      .closest(".astronav-dropdown")
      .querySelectorAll(".astronav-dropdown-submenu");
    Array.from(siblingSubmenus)
      .filter((el) => el !== submenu && !submenu.contains(el))
      .forEach(closeMenu);
  }

  function closeAllDropdowns(event: any) {
    const dropdownMenus = document.querySelectorAll(".dropdown-toggle");
    const dropdownParent = document.querySelectorAll(
      ".astronav-dropdown, .astronav-dropdown-submenu"
    );
    const isButtonInsideDropdown = [
      ...document.querySelectorAll(
        ".astronav-dropdown button, .astronav-dropdown-submenu button, #astronav-menu"
      ),
    ].some((button) => button.contains(event.target));
    if (!isButtonInsideDropdown) {
      dropdownMenus.forEach((d) => {
        // console.log("I ran", d);
        // if (!d.contains(event.target)) {
        d.classList.remove("open");
        d.removeAttribute("open");
        d.classList.add("hidden");
        // }
      });
      dropdownParent.forEach((d) => {
        d.classList.remove("open");
        d.removeAttribute("open");
        d.setAttribute("aria-expanded", "false");
      });
    }
  }

  function toggleMenu(menu: any) {
    menu.classList.toggle("open");
    const expanded = menu.getAttribute("aria-expanded") === "true";
    menu.setAttribute("aria-expanded", expanded ? "false" : "true");
    menu.hasAttribute("open")
      ? menu.removeAttribute("open")
      : menu.setAttribute("open", "");

    const dropdownToggle = menu.querySelector(".dropdown-toggle");
    const dropdownExpanded = dropdownToggle.getAttribute("aria-expanded");
    dropdownToggle.classList.toggle("hidden");
    dropdownToggle.setAttribute(
      "aria-expanded",
      dropdownExpanded === "true" ? "false" : "true"
    );
  }

  function closeMenu(menu: any) {
    // console.log("closing", menu);
    menu.classList.remove("open");
    menu.removeAttribute("open");
    menu.setAttribute("aria-expanded", "false");
    const dropdownToggles = menu.querySelectorAll(".dropdown-toggle");
    dropdownToggles.forEach((toggle: any) => {
      toggle.classList.add("hidden");
      toggle.setAttribute("aria-expanded", "false");
    });
  }

  function handleCloseOnClick() {
    const navMenuItems = document.querySelector(".astronav-items");
    const navToggle = document.getElementById("astronav-menu");
    const navLink = navMenuItems && navMenuItems.querySelectorAll("a");

    const MenuIcons = navToggle?.querySelectorAll(".astronav-toggle");

    navLink &&
      navLink.forEach((item) => {
        item.addEventListener("click", () => {
          navMenuItems?.classList.add("hidden");
          MenuIcons?.forEach((el) => {
            el.classList.toggle("hidden");
          });
        });
      });
  }
</script>
